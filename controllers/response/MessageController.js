const template = require("../../templates/template");
const { ADMIN } = template;
const {
  extractCharactersAndNumbers,
  extractContentWithinParentheses,
} = require("../../utils/helpers");
const {
  linkAdminRichmenu,
  unlinkAdminRichmenu,
} = require("../../utils/httpRequest");

const ProblemController = require("../ProblemController");
const SolutionController = require("../SolutionController");
const RequestController = require("../RequestController");

exports.getResponse = async (request, requesterCode) => {
  try {
    if (request === "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏±‡∏ç‡∏´‡∏≤") {
      return { type: "text", text: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì" };
    } else if (request.includes("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")) {
      const reqId = extractCharactersAndNumbers(request);

      if (request.includes("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")) {
        const userCode = extractContentWithinParentheses(request);

        if (userCode) {
          const response = await unlinkAdminRichmenu(userCode, requesterCode);

          if (response.data) {
            return {
              type: "text",
              text: `‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à target: ${userCode}, by: ${requesterCode}`,
            };
          }
        }
      } else if (request === "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤") {
        await ProblemController.destroyProblemUncompleted(requesterCode);
        await SolutionController.destroySolutionUncompleted(requesterCode);
      } else if (request.includes(reqId)) {
        const cancelRequest = await RequestController.cancelRequest(
          requesterCode,
          reqId
        );

        if (cancelRequest) {
          return {
            type: "text",
            text: `‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ${reqId} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏öüòÜ`,
          };
        } else {
          return {
            type: "text",
            text: `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏öü•≤ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ${reqId} ‡πÑ‡∏î‡πâüòû`,
          };
        }
      }

      return { type: "text", text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö " };
    } else if (request === "‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô") {
      // return {
      //   type: "text",
      //   text: "‡πÅ‡∏™‡∏î‡∏á QuickReply ‡πÉ‡∏´‡πâ user ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏° Admin ‡∏™‡∏±‡∏Å 1 ‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ú‡∏ô‡∏Å",
      // };
    } else if (request.includes("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ôadmin")) {
      const email = extractContentWithinParentheses(request);

      if (email) {
        const response = await linkAdminRichmenu(requesterCode, email);

        if (response.data) {
          return {
            type: "text",
            text: `‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à userCode: ${requesterCode}`,
          };
        }
      }
    }

    // ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
    if (request.includes("‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ >")) {
      const solutionTitle = request.split("> ")[1];

      const solution = await SolutionController.getSolution(solutionTitle);
      if (solution) {
        const image = `${process.env.BASE_URL}/public/uploads/solutions/${solution.image}`;

        const replyMessage = [
          {
            type: "text",
            text: `‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ${solutionTitle} ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö \n\n${solution.description}`,
          },
          {
            type: "image",
            originalContentUrl: image,
            previewImageUrl: image, // Assuming the same URL is used for preview
          },
        ];

        return replyMessage;
      }
    }

    if (request === "COSCI FAQ") {
      return { type: "text", text: "Soon" };
    }
  } catch (error) {
    console.error("Error in Message getResponse:", error);
  }
};
